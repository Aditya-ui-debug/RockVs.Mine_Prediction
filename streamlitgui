#This is a GUI(graphical user interface for this project)
#I used streamlit for this purpose
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import streamlit as st

# Get data
solar_data = pd.read_csv('sonar.csv', header=None)
solar_data.head()

# Prepare data
solar_data.groupby(60).mean()
solar_data.describe()

# Train test split
X = solar_data.drop(columns=60, axis=1)
y = solar_data[60]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, stratify=y, random_state=1)

# Train and Evaluate model
model = LogisticRegression()
model.fit(X_train, y_train)
training_prediction = model.predict(X_train)
print(accuracy_score(training_prediction, y_train))
test_prediction = model.predict(X_test)
print(accuracy_score(test_prediction, y_test))

# Create Streamlit App:
st.set_page_config(page_title="Prediction of Rock/Mine", page_icon=":gem:", layout="wide", initial_sidebar_state="collapsed")

# Set background color
st.markdown(
    """
    <style>
        body {
            background-color: #f0f0f0;
        }
    </style>
    """,
    unsafe_allow_html=True
)

st.title("Prediction of Rock/Mine")

# Text input for user to enter data
input_data = st.text_input('Enter comma-separated values here')

# Predict and show result on button click
if st.button('Rock/mine'):
    # Prepare input data
    input_data_np_array = np.asarray(input_data.split(','), dtype=float)
    reshaped_input = input_data_np_array.reshape(1, -1)
    # Predict and show result
    prediction = model.predict(reshaped_input)
    if prediction[0] == 'R':
        st.write('This Object is Rock')
    else:
        st.write('The Object is Mine')

